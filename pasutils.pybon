"""
ChatterBot utility functions
"""
from nltk.corpus import wordnet

def import_module(dotted_path):
    import importlib

    module_parts = dotted_path.split('.')
    module_path = '.'.join(module_parts[:-1])
    module = importlib.import_module(module_path)

    return getattr(module, module_parts[-1])

def get_initialization_functions(obj, attribute):
    attribute_parts = attribute.split('.')
    outermost_attribute = getattr(obj, attribute_parts.pop(0))
    for next_attribute in attribute_parts:
        outermost_attribute = getattr(outermost_attribute, next_attribute)

    return getattr(outermost_attribute, 'initialization_functions', [])

def initialize_class(data, *args, **kwargs):
    if isinstance(data, dict):
        import_path = data.get('import_path')
        data.update(kwargs)
        Class = import_module(import_path)

        return Class(*args, **data)
    else:
        Class = import_module(data)

        return Class(*args, **kwargs)

def validate_adapter_class(validate_class, adapter_class):
    from chatterbot.adapters import Adapter

    if isinstance(validate_class, dict):
        if 'import_path' not in validate_class:
            raise Adapter.InvalidAdapterTypeException(
                'The dictionary {} must contain a value for "import_path"'.format(
                    str(validate_class)
                )
            )
        validate_class = validate_class.get('import_path')

    if not issubclass(import_module(validate_class), (adapter_class, Neo4jStorageAdapter)):
        raise Adapter.InvalidAdapterTypeException(
            '{} must be a subclass of {} or {}'.format(
                validate_class,
                adapter_class.__name__,
                Neo4jStorageAdapter.__name__
            )
        )

def nltk_download_corpus(resource_path):
    from nltk.data import find
    from nltk import download
    from os.path import split, sep
    from zipfile import BadZipfile

    _, corpus_name = split(resource_path)

    if not resource_path.endswith(sep):
        resource_path = resource_path + sep

    downloaded = False

    try:
        find(resource_path)
    except LookupError:
        download(corpus_name)
        downloaded = True
    except BadZipfile:
        raise BadZipfile(
            'The NLTK corpus file being opened is not a zipfile, '
            'or it has been corrupted and needs to be manually deleted.'
        )

    return downloaded

def treebank_to_wordnet(pos):
    data_map = {
        'N': wordnet.NOUN,
        'J': wordnet.ADJ,
        'V': wordnet.VERB,
        'R': wordnet.ADV
    }

    return data_map.get(pos[0])

def get_response_time(chatbot, statement='Hello'):
    import time

    start_time = time.time()

    chatbot.get_response(statement)

    return time.time() - start_time

def print_progress_bar(description, iteration_counter, total_items, progress_bar_length=20):
    import sys

    percent = float(iteration_counter) / total_items
    hashes = '#' * int(round(percent * progress_bar_length))
    spaces = ' ' * (progress_bar_length - len(hashes))
    sys.stdout.write('\r{0}: [{1}] {2}%'.format(description, hashes + spaces, int(round(percent * 100))))
    sys.stdout.flush()
    if total_items == iteration_counter:
        print('\r')

def download_nltk_stopwords():
    nltk_download_corpus('stopwords')

def download_nltk_wordnet():
    nltk_download_corpus('corpora/wordnet')

def download_nltk_averaged_perceptron_tagger():
    nltk_download_corpus('averaged_perceptron_tagger')

def download_nltk_vader_lexicon():
    nltk_download_corpus('vader_lexicon')

def import_neo4j_storage_adapter():
    from chatterbot.storage.neo4j_storage import Neo4jStorageAdapter
    return Neo4jStorageAdapter

def example_function():
    Neo4jStorageAdapter = import_neo4j_storage_adapter()
    # Utilisez Neo4jStorageAdapter et les autres fonctions selon les besoins

